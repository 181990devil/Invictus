namespace = philosopher_generation

## Game Inialized Event to Generate Philosophers

philosopher_generation.1 = { # Platonist School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.1.t"
	desc = "philosopher_generation.1.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_platonist_scholarch
		}
		NOT = {
			any_character = {
					has_character_modifier = platonist_cmod
					NOR = {
						has_character_modifier = successor
						has_character_modifier = scholarch
					}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = platonist_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.1.a"
	}
	
}


philosopher_generation.2 = { # Platonist School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.2.t"
	desc = "philosopher_generation.2.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_platonist_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = platonist_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = platonist_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.2.a"
	}
	
}

		
philosopher_generation.3 = { # Platonist School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.3.t"
	desc = "philosopher_generation.3.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		# any_owned_province = {
			# OR = {
				# has_province_modifier = resident_epicurean_scholarch
				# has_province_modifier = resident_stoic_scholarch
				# has_province_modifier = resident_platonist_scholarch
				# has_province_modifier = resident_aristotelian_scholarch
				# has_province_modifier = resident_sceptic_scholarch
				# has_province_modifier = resident_academic_scholarch
			# }
		# }
		NOT = {
			any_character = {
				has_character_modifier = platonist_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = platonist_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = platonist_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.3.a"
	}
	
}

philosopher_generation.4 = { # Aristotelian School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.4.t"
	desc = "philosopher_generation.4.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_aristotelian_scholarch
		}
		NOT = {
			any_character = {
					has_character_modifier = peripatetic_cmod
					NOR = {
						has_character_modifier = successor
						has_character_modifier = scholarch
					}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = peripatetic_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.4.a"
	}
	
}


philosopher_generation.5 = { # Aristotelian School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.5.t"
	desc = "philosopher_generation.5.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_aristotelian_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = peripatetic_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = peripatetic_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.5.a"
	}
	
}

		
philosopher_generation.6 = { # Aristotelian School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.6.t"
	desc = "philosopher_generation.6.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_aristotelian_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = peripatetic_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = peripatetic_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = peripatetic_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.6.a"
	}
	
}

philosopher_generation.7 = { # Epicurean School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.7.t"
	desc = "philosopher_generation.7.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_epicurean_scholarch
		}
		NOT = {
			any_character = {
					has_character_modifier = epicurean_cmod
					NOR = {
						has_character_modifier = successor
						has_character_modifier = scholarch
					}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = epicurean_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.7.a"
	}
	
}


philosopher_generation.8 = { # Epicurean School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.8.t"
	desc = "philosopher_generation.8.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_epicurean_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = epicurean_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = epicurean_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.8.a"
	}
	
}

		
philosopher_generation.9 = { # Epicurean School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.9.t"
	desc = "philosopher_generation.9.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_epicurean_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = epicurean_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = epicurean_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = epicurean_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.9.a"
	}
	
}

philosopher_generation.10 = { # Stoic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.10.t"
	desc = "philosopher_generation.10.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_stoic_scholarch
		}
		NOT = {
			any_character = {
					has_character_modifier = stoic_cmod
					NOR = {
						has_character_modifier = successor
						has_character_modifier = scholarch
					}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = stoic_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.10.a"
	}
	
}


philosopher_generation.11 = { # Stoic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.11.t"
	desc = "philosopher_generation.11.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_stoic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = stoic_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = stoic_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.11.a"
	}
	
}

		
philosopher_generation.12 = { # Stoic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.12.t"
	desc = "philosopher_generation.12.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_stoic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = stoic_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = stoic_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = stoic_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.12.a"
	}
	
}

philosopher_generation.13 = { # Pyrrhonist School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.13.t"
	desc = "philosopher_generation.13.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_sceptic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = pyrrhonist_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = pyrrhonist_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.13.a"
	}
}


philosopher_generation.14 = { # Pyrrhonist School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.14.t"
	desc = "philosopher_generation.14.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_sceptic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = pyrrhonist_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = pyrrhonist_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.14.a"
	}
	
}

		
philosopher_generation.15 = { # Pyrrhonist School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.15.t"
	desc = "philosopher_generation.15.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_sceptic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = pyrrhonist_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = pyrrhonist_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = pyrrhonist_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.15.a"
	}
	
}

philosopher_generation.16 = { # Academic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.16.t"
	desc = "philosopher_generation.16.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_academic_scholarch
		}
		NOT = {
			any_character = {
					has_character_modifier = academic_cmod
					NOR = {
						has_character_modifier = successor
						has_character_modifier = scholarch
					}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = academic_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.16.a"
	}
	
}


philosopher_generation.17 = { # Academic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.17.t"
	desc = "philosopher_generation.17.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_academic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = academic_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = academic_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.17.a"
	}
	
}

		
philosopher_generation.18 = { # Academic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.18.t"
	desc = "philosopher_generation.18.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_academic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = academic_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = academic_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = academic_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.18.a"
	}
	
}


philosopher_generation.19 = { # Cyrenaic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.19.t"
	desc = "philosopher_generation.19.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:generated_philosopher
	
	trigger = {
		any_owned_province = {
				has_province_modifier = resident_cyrenaic_scholarch
		}
		NOT = {
			any_character = {
					has_character_modifier = cyrenaic_cmod
					NOR = {
						has_character_modifier = successor
						has_character_modifier = scholarch
					}
			}
		}
	}

	immediate = {
		
		while = {
			count = 2
			create_character = {
				culture = athenian
				religion = roman_pantheon 
				save_scope_as = generated_philosopher
			}
			scope:generated_philosopher = {
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = philosopher 
					duration = -1
				}	
				add_character_modifier ={
					##Create Philosophy modifier with same modifier
					name = cyrenaic_cmod 
					duration = -1
				}
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.19.a"
	}
	
}


philosopher_generation.20 = { # Cyrenaic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.20.t"
	desc = "philosopher_generation.20.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_successor
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_cyrenaic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = cyrenaic_cmod
				has_character_modifier = successor
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = cyrenaic_cmod
				NOR = {
					has_character_modifier = successor
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_successor
		}
		scope:designated_successor = {
			add_character_modifier ={
				name = successor 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.20.a"
	}
	
}

		
philosopher_generation.21 = { # Academic School
	type = country_event
	##Visible at start for Debug
	title = "philosopher_generation.21.t"
	desc = "philosopher_generation.21.desc"
	
	picture = great_library
	##hidden = yes
	
	left_portrait = root.current_ruler
	right_portrait = scope:designated_scholarch
	
	trigger = {
		any_owned_province = {
			has_province_modifier = resident_academic_scholarch
		}
		NOT = {
			any_character = {
				has_character_modifier = academic_cmod
				# NOT = {
					has_character_modifier = scholarch
				# }
			}
		}
		any_character = {
			has_character_modifier = academic_cmod
			has_character_modifier = successor
			NOT = {
				has_character_modifier = scholarch
			}
		}
	}

	immediate = {
		
		random_character = {
			limit = {
				has_character_modifier = academic_cmod
				has_character_modifier = successor
				NOT = {
					has_character_modifier = scholarch
				}
			}
			save_scope_as = designated_scholarch
		}
		scope:designated_scholarch = {
			remove_character_modifier = successor
			add_character_modifier ={
				name = scholarch 
				duration = -1
			}
		}
	}
	
	## Just so that the event pops up. 
	option = {
		name = "philosopher_generation.21.a"
	}
	
}

# philosopher_generation.100 = { # School Triggers
	# type = country_event
	# title = "philosopher_generation.100.t"
	# desc = "philosopher_generation.100.desc"
	# hidden = yes
	
	# immediate = {
		
		# if = {
			# limit = {
				# any_character = {
					# has_character_modifier = platonist_cmod
					# NOR = {
						# has_character_modifier = successor
						# has_character_modifier = scholarch
					# }
				# }
			# }
		# }
		# else = {
			# trigger_event = {
				# id = philosopher_generation.1
			# }
		# }
		
		# if = {
			# limit = {
			# any_character = {
				# has_character_modifier = platonist_cmod
				# has_character_modifier = successor
			# }
			# }
		# }
		# else = {
			# trigger_event = {
				# id = philosopher_generation.2
			# }
		# }
		
		# if = {
			# limit = {
			# any_character = {
				# has_character_modifier = platonist_cmod
				# has_character_modifier = scholarch
			# }
			# }
		# }
		# else = {
			# trigger_event = {
				# id = philosopher_generation.3
			# }
		# }
		
	# }
	
	# option = {
		# name = "philosopher_generation.100.a"
	# }
# }

## from Paulus

		# while = {
			# count = 10 ## Lets make 10
			# create_character = {
				# culture = athenian
				# religion = roman_pantheon 
				# save_scope_as = generated_philosopher
			# }
			# scope:generated_philosopher = {
				# add_character_modifier ={
					#Create Philosophy modifier with same modifier
					# name = philosopher 
					# duration = -1
				# }	
				##This is marker for variable list for the GUI
				# set_variable = {
					# name = philosopher_variable
				# }
			# }
		# }

