# First schemes activates the abilities to make character reform possible.


scheme_stoicism = {
	
	can_be_picked = {
		scheme_preconditions_ruler = yes
		finesse > 3
		NOT = {
			has_character_modifier = aspiring_stoic_cmod
			has_character_modifier = stoic_cmod
		}
	}

	finished_when = {
			custom_tooltip = {
			text = "scheme_ambition_fulfillment_always_yes"
			custom_tooltip = { text = "" always = no }
		}
	}
	
	abort = {
		OR = {
			NOT = {
				has_variable = ongoing_scheme_target
			}
			is_alive = no
			is_ruler = no
			has_character_modifier = indisposed_charmod
		}
	}
	
	chance = {
		base = 1
	}
		
	duration = 90
	
	on_start = scheme_stoicism_start
	on_finish = scheme_stoicism_finish
	
}


# scheme_guileless = {
	
	# can_be_picked = {
		# scheme_preconditions_ruler = yes
		# has_character_modifier = aspiring_stoic_cmod
		# NOT = {
			# has_trait = guileless
		# }
	# }
			
	# finished_when = {

	# }
	
	# abort = {
		# OR = {
			# NOT = {
				# has_variable = ongoing_scheme_target
			# }
			# is_alive = no
			# is_ruler = no
			# has_character_modifier = indisposed_charmod
		# }
	# }
	
	# chance = {
		# base = 1
	# }
		
	# duration = 120
	
	# on_start = scheme_guileless_start
	# on_finish = scheme_guileless_finish
	
# }


scheme_plain_speaking = {
	
	can_be_picked = {
		scheme_preconditions_ruler = yes
		has_character_modifier = aspiring_stoic_cmod
		NOT = {
			has_trait = plain_speaking
		}
	}

			
	finished_when = {
		# employer = {
			# OR = {
				# any_allied_country = {
					# count > 1
				# }
				# any_subject = {
					# count > 1
				# }
				# overlord = {
					# opinion = {
						# target = root.employer
						# value > 100
					# }
				# }
			# }
		# }	
		employer = {
			OR = {
				trigger_if = {
					limit = {
						is_subject = yes }
					}
				overlord = {
					opinion = {
					target = root.employer
					value > 100
					}
				}
				any_allied_country = {
					count > 1
				}
				any_subject = {
					count > 1
				}
			}
		}
	}
	
	abort = {
		OR = {
			NOT = {
				has_variable = ongoing_scheme_target
			}
			is_alive = no
			is_ruler = no
			has_character_modifier = indisposed_charmod
		}
	}
	
	chance = {
		base = 1
	}
		
	duration = 120
	
	on_start = scheme_plain_speaking_start
	on_finish = scheme_plain_speaking_finish
	
}


# scheme_righteous = {
	
	# can_be_picked = {
		# scheme_preconditions_ruler = yes
		# has_character_modifier = aspiring_stoic_cmod
		# NOT = {
			# has_trait = righteous
		# }
	# }

			
	# finished_when = {

	# }
	
	# abort = {
		# OR = {
			# NOT = {
				# has_variable = ongoing_scheme_target
			# }
			# is_alive = no
			# is_ruler = no
			# has_character_modifier = indisposed_charmod
		# }
	# }
	
	# chance = {
		# base = 1
	# }
		
	# duration = 100
	
	# on_start = scheme_righteous_start
	# on_finish = scheme_righteous_finish
	
# }

scheme_secure = {
	
	can_be_picked = {
		scheme_preconditions_ruler = yes
		has_character_modifier = aspiring_stoic_cmod
		NOT = {
			has_trait = secure
		}
	}

			
	finished_when = {
			employer = {
				# count < 2
				NOT = {
				any_character = {
					loyalty < 30
				}
				}
			}
			# num_characters_below_max_loyalty = {
				# value < 2
			# }
	}
	
	abort = {
		OR = {
			NOT = {
				has_variable = ongoing_scheme_target
			}
			is_alive = no
			is_ruler = no
			has_character_modifier = indisposed_charmod
		}
	}
	
	chance = {
		base = 1
	}
		
	duration = 90
	
	on_start = scheme_secure_start
	on_finish = scheme_secure_finish
	
}


scheme_self_controlled = {
	
	can_be_picked = {
		scheme_preconditions_ruler = yes
		has_character_modifier = aspiring_stoic_cmod
		NOT = {
			has_trait = self_controlled
		}
	}

			
	finished_when = {
		wealth > 300
		corruption < 20
	}
	
	abort = {
		OR = {
			NOT = {
				has_variable = ongoing_scheme_target
			}
			is_alive = no
			is_ruler = no
			has_character_modifier = indisposed_charmod
		}
	}
	
	chance = {
		base = 1
	}
		
	duration = 90
	
	on_start = scheme_self_controlled_start
	on_finish = scheme_self_controlled_finish
	
}


scheme_complete_stoicism_training = {
	
	can_be_picked = {
		scheme_preconditions_ruler = yes
		has_character_modifier = aspiring_stoic_cmod
		# has_trait = guileless
		has_trait = plain_speaking
		# has_trait = righteous
		has_trait = secure
		has_trait = self_controlled
	}
			
	finished_when = {
			custom_tooltip = {
			text = "scheme_ambition_fulfillment_always_yes"
			custom_tooltip = { text = "" always = no }
		}
	}
	
	abort = {
		OR = {
			NOT = {
				has_variable = ongoing_scheme_target
			}
			is_alive = no
			is_ruler = no
			has_character_modifier = indisposed_charmod
		}
	}
	
	chance = {
		base = 1
	}
		
	duration = 30
	
	on_start = scheme_complete_stoicism_start
	on_finish = scheme_complete_stoicism_finish
		
}


scheme_abandon_stoicism = {
	
	can_be_picked = {
		scheme_preconditions_ruler = yes
		OR = {
			has_character_modifier = aspiring_stoic_cmod
			has_character_modifier = stoic_cmod
		}

	}
			
	finished_when = {
			custom_tooltip = {
			text = "scheme_ambition_fulfillment_always_yes"
			custom_tooltip = { text = "" always = no }
		}
	}
	
	abort = {
		OR = {
			NOT = {
				has_variable = ongoing_scheme_target
			}
			is_alive = no
			is_ruler = no
		}
	}
	
	chance = {
		base = 1
	}
		
	duration = 30
	
	on_start = scheme_abandon_stoicism_start
	on_finish = scheme_abandon_stoicism_finish
		
}

